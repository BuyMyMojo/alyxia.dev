<!-- prettier-ignore -->
{[define content (call-next)]}~
<!-- prettier-ignore -->
{[define defaults '((title . "Alyxia Sother")
                    (description . "Alyxia Sother (@lexisother) is a software developer."))]}
{[define latest-post (car (car (sort-posts-by-date (fetch-posts (if (not (docker-running))
                                (string "/home/alyxia/Documents/gitrepos/alyxia.dev-lisp/blog")
                                (string "/usr/src/app/blog"))))))]}

;; Now, trust me, it's not like I didn't try to do this in a better way. I
;; tried creating a map like the above one for `defaults`.
;; It looked like this: `'((title . (gettitle)))`. However, whenever
;; referencing a key like `actual.title, it stringifies the S-expression instead
;; of giving me the expected output.
<!-- prettier-ignore -->
{[defun title ()
  (if (eq (@attr 'TITLE) nil)
    (string defaults.title)
    (concatenate (@attr 'TITLE) " | " defaults.title))]}
{[defun description ()
   (if (eq (@attr 'DESC) nil)
     (string defaults.description)
     (@attr 'DESC))]}
{[defun imageUrl ()
   (if (not (eq (@attr 'IMAGE) nil))
     (concatenate "/s/img" (@attr 'IMAGE)))]}
{[defun rssUrl ()
  (@attr 'RSS)]}

<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=0" />

    <title>{(title)}</title>

    <meta name="description" content="{(description)}">

;; If only I could figure out a good way to autogenerate this metadata.
    <meta property="og:type" content="website" />
    <meta property="og:title" content="{(title)}" />
    <meta property="og:description" content="{(description)}" />
    {if (not (eq (imageUrl) nil)) {<meta property="og:image" content="{(imageUrl)}">}}

    <meta name="twitter:title" content="{(title)}" />
    <meta name="twitter:site" content="@lexisother" />
    <meta name="twitter:creator" content="@lexisother" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:description" content="{(description)}" />
    {if (not (eq (imageUrl) nil)) {<meta property="twitter:image" content="{(imageUrl)}">}}

    <!-- Styles -->
    {[define styles '("sanitize" "reset" "common" "index" "static")]}
    {foreach style styles {
      <link rel="stylesheet" href="/s/css/{style}.css" />
    }}

    {(foreach style (reverse (@attr 'STYLES)) {
      <link rel="stylesheet" type="text/css" href="{\style}" />
    })}
    <!-- END:Styles -->
  </head>
  <body>
    <div class="header">
      <div class="topbar">
        <marquee truespeed="" scrolldelay="30" scrollamount="3">
          <p>Welcome to Alyxia's domain</p>
          <img src="/s/img/sep.png">
          <p>Latest post: "{latest-post.title}"</p>
        </marquee>
        <!-- <p class="marquee-text">my nuts are in severe pain</p> -->
      </div>
      <!-- Restore whenever I want to implement breadcrumbs. -->
      <!-- <div class="topbar staticbar"> -->
      <!--   <p>{\{<BREADCRUMBS HERE>}}</p> -->
      <!-- </div> -->
      <div class="knob-row">
        {knob "PROJECTS" "/projects"}
        {knob "BLOG"     "/blog"    }
      </div>
      <a href="/">
        {(headerlogo)}
      </a>
    </div>
    <div class="body">{content}</div>
  </body>
</html>

;; vim: set ft=html:
